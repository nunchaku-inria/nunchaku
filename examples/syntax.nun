
val nat : type.
val list : type -> type.

val nil : pi a:type. list a.
val cons : pi a:type. a -> list a -> list a.

val n : nat.
val f : nat -> nat.
val p : nat -> prop.
val polyprop : pi a. a -> prop.

val product : type -> type -> type.

val pair : pi a b. a -> b -> product a b.

axiom forall x. p (f (f (f x))).

val g : product nat nat -> product nat nat.

spec @polyprop as polyprop :=
    forall x y. polyprop (g (g x)) || polyprop (f (f y)).

axiom polyprop (fun (f:nat -> list nat -> nat). f n (cons n nil)).
axiom polyprop ((fun g. g n (cons n nil)) (fun n l. cons n (cons n l))).

# let's play with monadic-ish operators
# prenex polymorphism only please.
val yolo : pi a. (list (list a) -> list a) -> list prop.

rec @yolo prop as yolo :=
  forall join.
    yolo join
    = join (cons (cons true nil) (cons (@cons prop false nil) nil)).




