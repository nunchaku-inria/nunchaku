
# recursive spec and rec
# EXPECT: unknown

data nat :=
  | z
  | s nat.

rec even : nat -> prop :=
  even z = true ;
  forall n. (even (s n) = odd n)
and odd : nat -> prop :=
  odd z = false;
  forall n. (odd (s n) = even n).

data list a :=
  | nil
  | cons a (list a).

# specification for lists of polymorphic lists
spec head : pi a. list a -> a
and tail : pi a. list a -> list a :=
    forall x l. head (cons x l) = x;
    forall x l. tail (cons x l) = l.

# odd number that is >= 4
goal exists l. (odd (head l) && (exists m. head l = s (s (s (s m))))).

