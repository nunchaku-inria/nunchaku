data nat :=
  | z
  | s nat.

pred [wf] even : nat -> prop :=
  even z;
  forall n. odd n => even (s n)
and odd : nat -> prop :=
  forall n. even n => odd (s n).

data list a :=
  | nil
  | cons a (list a).

# partial funs
rec head : pi a. list a -> a :=
    forall x l. head (cons x l) = x
and tail : pi a. list a -> list a :=
    forall x l. tail (cons x l) = l.

# odd number that is >= 4
goal exists l. l != nil && odd (head l) && (exists m. head l = s (s (s (s m)))).
